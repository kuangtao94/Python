# -*- coding: utf-8 -*-


import keyword
import math


# 打印系统关键字
print(keyword.kwlist)

# 可以同时给多个变量赋相同的值
x = y = z = 100
print(x, y, z)

# 也可以同时给多个变量赋不同类型的值
a, b, c = 1, 2, "three"
print(a, b, c)

# 交换两个变量的值
a, b = b, a
print(a, b)

# ---------------------------------------------------
# python3支持4种数字类型：int、float、bool、complex（复数）
# ---------------------------------------------------
# int 整数，为长整型
number_int1 = 10
# 内置的 type() 函数可以用来查询变量所指的对象类型
print(type(number_int1))
# 向下取整，将浮点型强制转换为整型，去掉全部小数位，取整数部分
number_int2 = int(10.95)
print(number_int2)
# 向上取整，需要导入math模块
number_int3 = math.ceil(10.15)
print(number_int3)
# 四舍五入
number_int4 = round(10.55)
print(number_int4)
# 字符串强制转换为整型，不可以包含小数点
string = "100"
number_int5 = int(string)
print(number_int5)

# float 浮点数
number_float1 = 10.25
# 两个整数相除，不管是否能整除，结果都是浮点型
number_float2 = 25 / 5
print(number_float2)
# 整型to浮点型
number_float3 = float(100)
print(number_float3)
# 字符串to浮点型
number_float4 = float("100.5")
print(number_float4)

# bool 布尔值：True和False，与整数中的1和0对应。
number_bool = True
# 布尔型可以用于数值运算
print(number_bool+5)

# complex 复数 实部和虚部都为浮点数，虚数部分必须使用后缀字母j或J
number_complex = 5.58 + 3.25j
# 使用real属性取出复数的实部
print(number_complex.real)
# 使用imag属性取出复数的虚部
print(number_complex.imag)

# ---------------------------------------------------
# 字符串可以用单引号、双引号或三引号括起来
# ---------------------------------------------------
version = "Version: python 3.6.4"
print(version)
# 使用反斜杠(\)转义特殊字符，比如：\n、\r、\f、\v、\t
version = "Version: \n python 3.6.4"
print(version)
# 不想让反斜杠(\)发生转义，可以使用\\，或者在字符串前面添加一个前缀r，表示原始字符串
version = "Version: \\n python 3.6.4"
print(version)
version = r"Version: \n\r python 3.6.4"
print(version)
# 将整型强制转换为字符串
i = 2018
date1 = str(i)
print(date1)
# 将浮点型强制转换为字符串
f = 2018.5
date2 = str(f)
print(date2)
# 如果字符串中包含单引号，使用双引号进行定义
str1 = "It's very good!"
print(str1)
# 如果字符串中包含双引号，使用单引号进行定义
str2 = '字符串“Hello”是由5个字符组合而成'
print(str2)
# 当字符串长度超过一行时，必须使用三引号
str3 = """沁园春·雪
北国风光，千里冰封，万里雪飘。 
望长城内外，惟余莽莽；大河上下，顿失滔滔。
山舞银蛇，原驰蜡象，欲与天公试比高。
须晴日，看红装素裹，分外妖娆。 """
print(str3)
str4 = "沁园春·雪\n北国风光，千里冰封，万里雪飘。\n望长城内外，惟余莽莽；大河上下，顿失滔滔。\n山舞银蛇，原驰蜡象，欲与天公试比高。\n须晴日，看红装素裹，分外妖娆。"
print(str4)


# ---------------------------------------------------
# 列表List表示一组有序的元素，与其他语言中的数组类似
# ---------------------------------------------------
# 定义一个全是数字的成绩列表
score = [90, 92, 88, 79, 95, 82]
# 可以通过索引值来访问列表中的元素，从左到右，起始值为0，最后一个元素为n-1
first_one = score[0]
# 也可以从右到左通过一个负数索引值进行访问，第一个元素为-1，最后一个元素为-n
last_one = score[-1]
# 列表中的元素可以是不同的数据类型
student = ['1001', '张晓晓', '女', 12, [86, 88, 92]]

# ---------------------------------------------------
# 元组Tuple表示一组有序的元素，使用方法与列表类似。定义后不可更改
# ---------------------------------------------------
# 用小括号定义一个全是字符串的元组
subject = ('语文', '数学', '英语', '政治')
# 也可以省略小括号，直接进行赋值
student_info = '1001', '张晓晓', '女', 12

# ---------------------------------------------------
# 集合Sets是一组无序的不能重复的元素，无法使用索引进行访问
# ---------------------------------------------------
# 使用大括号{}创建集合，并自动清除重复的元素
fruits = {'苹果', '香蕉', '桔子', '草莓', '苹果'}
# 可以先创建一个列表，然后使用set()函数将列表转化为集合
types = ['数字', '字符串', '列表', '元组', '集合', '字典', '集合']
type_set = set(types)
# 创建一个空集合，必须使用set()，不能使用{}
null_set = set()

# -------------------------------------------------------
# 字典Dictionary是另一种可变容器模型，可以存储任意类型的对象
# 语法格式：d = {key1: value1, key2: value2, key3: value3}
# 由若干个键（key)-值(value)对组成。键必须是唯一的，但值可以不唯一。
# -------------------------------------------------------
stud = {'学号': '1001', '姓名': '张晓晓', '性别': '女', '年龄': 12}
print(stud['姓名'])
print(stud['年龄'])
stud['年龄'] = 13
print(stud)
